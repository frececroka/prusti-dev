// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zhide-uuids
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"

#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;

use prusti_contracts::*;

struct T {
    f: u32,
    g: u32,
}

fn borrows(_x: &mut u32) {
    let mut a = T{f: 1, g: 2,};
    if !(a.f == 1) {




        { ::std::rt::begin_panic("assertion failed: a.f == 1") }
    };
    if !(a.g == 2) {
        { ::std::rt::begin_panic("assertion failed: a.g == 2") }
    };
    let x = &mut a;
    let y = &mut x.f;
    let z = &x.g;
    *y = 5;
    if !(*z == 2) { { ::std::rt::begin_panic("assertion failed: *z == 2") } };
    if !(a.f == 5) {
        { ::std::rt::begin_panic("assertion failed: a.f == 5") }
    };
}
fn borrows_fail(_x: &mut u32) {
    let mut a = T{f: 1, g: 2,};
    if !(a.f == 1) {
        { ::std::rt::begin_panic("assertion failed: a.f == 1") }
    };
    if !(a.g == 2) {
        { ::std::rt::begin_panic("assertion failed: a.g == 2") }
    };
    let x = &mut a;
    let y = &mut x.f;
    let z = &x.g;
    *y = 5;
    if !(*z == 2) { { ::std::rt::begin_panic("assertion failed: *z == 2") } };
    if !(a.f == 6) {
        { ::std::rt::begin_panic("assertion failed: a.f == 6") }
    };
}
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_reborrow_$(NUM_UUID)<'a>(x:
                                                                      &'a mut T,
                                                                  result:
                                                                      &'a mut u32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { before_expiry(*result) == x.f };
}
#[prusti::pledge_spec_id_ref = ":$(NUM_UUID)"]
fn reborrow<'a>(x: &'a mut T) -> &'a mut u32 { &mut x.f }
fn reborrow2(x: &mut T) -> &mut u32 { &mut x.f }
fn main() { }
Assertion(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:13 ~ pledges[317d]::prusti_post_item_reborrow_$(NUM_UUID)[0]::{{closure}}[0]) }) })
