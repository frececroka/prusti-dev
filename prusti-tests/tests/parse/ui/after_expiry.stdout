// compile-flags: -Zprint-desugared-specs -Zprint-typeckd-specs -Zskip-verify -Zhide-uuids
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"




#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test3_$(NUM_UUID)(a: bool,
                                                           result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { a };
}
#[prusti::pledge_spec_id_ref = ":$(NUM_UUID)"]
fn test3(a: bool) { }
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test5_$(NUM_UUID)(x: u32,
                                                           result: u32) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { result == match x { 1 => 1, 2 => 2, _ => 0, } };
}
#[prusti::pledge_spec_id_ref = ":$(NUM_UUID)"]
fn test5(x: u32) -> u32 { 1 }
fn main() { }
Assertion(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:6 ~ after_expiry[317d]::prusti_post_item_test3_$(NUM_UUID)[0]::{{closure}}[0]) }) })
Assertion(Assertion { kind: Expr(Expression { spec_id: SpecificationId($(UUID)), id: ExpressionId(101), expr: DefId(0:9 ~ after_expiry[317d]::prusti_post_item_test5_$(NUM_UUID)[0]::{{closure}}[0]) }) })
